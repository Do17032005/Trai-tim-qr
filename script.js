// T·∫°o m√£ QR v·ªõi link GitHub Pages
const qrContent = "https://do17032005.github.io/Trai-tim-qr"; // Link GitHub Pages
QRCode.toCanvas(document.getElementById("qrcode"), qrContent, {
  width: 200, // K√≠ch th∆∞·ªõc QR code
  color: {
    dark: '#000000', // M√†u QR code
    light: '#ffffff' // M√†u n·ªÅn
  }
}, function (error) {
  if (error) console.error(error);
  console.log('QR code generated!');
});

// Hi·ªáu ·ª©ng text bay
const canvas = document.getElementById('floating-text');
const ctx = canvas.getContext('2d');

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const messages = [
  "Anh y√™u em üå∏üåº", "C√°m ∆°n em üå∑üåπ", "Anh s·∫Ω lu√¥n b√™n em üíñ‚ù§Ô∏è",
  "Em l√† t·∫•t c·∫£ v·ªõi anh üåπüåª", "üå∏üåºüå∑üåπüåªüå∫", "M√£i m√£i b√™n nhau üå∑üíï",
  "Y√™u em nhi·ªÅu l·∫Øm üíïüíñ", "Em l√† √°nh s√°ng c·ªßa ƒë·ªùi anh üåü‚ú®", 
  "Ch√∫c em m·ªôt ng√†y t·ªët l√†nh üåªüå∫", "Anh nh·ªõ em üå∏üåº",
  "Em l√† ni·ªÅm vui c·ªßa anh üêªüê•",
  "Em l√†m anh h·∫°nh ph√∫c üê•üêæ", "üå∏üåºüå∑üåπüåªüå∫", 
  "Anh s·∫Ω lu√¥n y√™u em üêæ‚ù§Ô∏è",
  "Em l√† m√≥n qu√† qu√Ω gi√° nh·∫•t üéÅüíê",
  "Em l√† l√Ω do anh s·ªëng m·ªói ng√†y üå∏üåü", 
  "Anh s·∫Ω lu√¥n ·ªßng h·ªô em üê±üê∂", "Ch√∫ng ta s·∫Ω c√πng nhau x√¢y d·ª±ng t∆∞∆°ng lai üå∑üåà",
  "üíêüå∏üåºüå∑üåπüåªüå∫", "‚ú®üåüüíñüíïüíû‚ù§Ô∏è", "üêªüê•üê∞ü¶ãüêæ"
];
const floatingTexts = [];

function createText() {
  const text = messages[Math.floor(Math.random() * messages.length)];
  const x = Math.random() * canvas.width;
  const y = canvas.height + Math.random() * 50; // Gi·∫£m kho·∫£ng c√°ch xu·∫•t ph√°t
  const speed = 3.5 + Math.random() * 1; // Gi·∫£m t·ªëc ƒë·ªô ƒë·ªÉ ch·ªØ g·∫ßn nhau h∆°n
  const fontSize = 20 + Math.random() * 20;
  const opacity = 0.5 + Math.random() * 0.5;
  const color = `rgba(255, ${Math.floor(Math.random() * 200)}, 255, ${opacity})`;

  // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ch·ªØ bay
  if (floatingTexts.length > 50) {
    floatingTexts.shift(); // X√≥a ph·∫ßn t·ª≠ c≈© nh·∫•t
  }

  floatingTexts.push({ text, x, y, speed, fontSize, color });
}

function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  floatingTexts.forEach((txt, i) => {
    ctx.save();
    ctx.font = `${txt.fontSize}px Arial`;
    ctx.fillStyle = txt.color;

    // Hi·ªáu ·ª©ng ph√°t s√°ng
    ctx.shadowColor = txt.color; // M√†u ph√°t s√°ng gi·ªëng m√†u ch·ªØ
    ctx.shadowBlur = 30; // Gi·∫£m ƒë·ªô m·ªù ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t
    ctx.shadowOffsetX = 0; // Kh√¥ng d·ªãch chuy·ªÉn b√≥ng theo tr·ª•c X
    ctx.shadowOffsetY = 0; // Kh√¥ng d·ªãch chuy·ªÉn b√≥ng theo tr·ª•c Y

    // V·∫Ω ch·ªØ ph√°t s√°ng
    ctx.fillText(txt.text, txt.x, txt.y);

    ctx.restore();

    txt.y -= txt.speed;

    if (txt.y < -50) floatingTexts.splice(i, 1); // X√≥a ch·ªØ khi ra kh·ªèi m√†n h√¨nh
  });

  requestAnimationFrame(animate);
}

setInterval(createText, 1000); // T·∫°o ch·ªØ m·ªói 500ms
animate();

let scene, camera, renderer, controls, texts = [];

function init3D() {
  // T·∫°o scene
  scene = new THREE.Scene();

  // T·∫°o camera
  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.z = 50;

  // T·∫°o renderer
  renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  // Th√™m ƒëi·ªÅu khi·ªÉn xoay, thu ph√≥ng
  controls = new THREE.OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true; // Hi·ªáu ·ª©ng m∆∞·ª£t khi xoay
  controls.dampingFactor = 0.05; // ƒê·ªô m∆∞·ª£t
  controls.enableZoom = true; // Cho ph√©p thu ph√≥ng
  controls.minDistance = 10; // Kho·∫£ng c√°ch t·ªëi thi·ªÉu
  controls.maxDistance = 200; // Kho·∫£ng c√°ch t·ªëi ƒëa

  // T·∫°o ch·ªØ 3D
  create3DText();

  // B·∫Øt ƒë·∫ßu render
  animate3D();
}

function create3DText() {
  const loader = new THREE.FontLoader();
  loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {
    const messages = [
      "Anh y√™u em üå∏", "C√°m ∆°n em üåº", "Anh s·∫Ω lu√¥n b√™n em üíñ", "‚ù§Ô∏è",
      "Em l√† t·∫•t c·∫£ v·ªõi anh üåπ", "M√£i m√£i b√™n nhau üå∑", "Y√™u em nhi·ªÅu l·∫Øm üíï",
      "Em l√† √°nh s√°ng c·ªßa ƒë·ªùi anh üåü", "Ch√∫c em m·ªôt ng√†y t·ªët l√†nh üåª", "Anh nh·ªõ em üå∫"
    ];

    for (let i = 0; i < 20; i++) {
      const textGeometry = new THREE.TextGeometry(messages[Math.floor(Math.random() * messages.length)], {
        font: font,
        size: 2,
        height: 0.5,
        curveSegments: 12,
        bevelEnabled: true,
        bevelThickness: 0.03,
        bevelSize: 0.02,
        bevelSegments: 5
      });

      const textMaterial = new THREE.MeshStandardMaterial({
        color: new THREE.Color(`hsl(${Math.random() * 360}, 300%, 300%)`), // M√†u ch√≠nh c·ªßa ch·ªØ
        emissive: new THREE.Color(`hsl(${Math.random() * 360}, 300%, 250%)`), // M√†u ph√°t s√°ng
        emissiveIntensity: 5.0 // TƒÉng c∆∞·ªùng ƒë·ªô s√°ng
      });

      const textMesh = new THREE.Mesh(textGeometry, textMaterial);

      // ƒê·∫∑t v·ªã tr√≠ ng·∫´u nhi√™n trong kh√¥ng gian 3D
      textMesh.position.set(
        (Math.random() - 0.5) * 100,
        (Math.random() - 0.5) * 100,
        (Math.random() - 0.5) * 100
      );

      // Th√™m chuy·ªÉn ƒë·ªông v·ªõi t·ªëc ƒë·ªô nhanh h∆°n
      textMesh.userData = {
        velocity: new THREE.Vector3(
          (Math.random() - 0.5) * 2.0,
          (Math.random() - 0.5) * 2.0,
          (Math.random() - 0.5) * 2.0
        )
      };

      texts.push(textMesh);
      scene.add(textMesh);
    }
  });

  // Th√™m √°nh s√°ng
  const ambientLight = new THREE.AmbientLight(0xffffff, 3.0); // TƒÉng c∆∞·ªùng ƒë·ªô s√°ng m√¥i tr∆∞·ªùng
  scene.add(ambientLight);

  const pointLight = new THREE.PointLight(0xffffff, 5.0, 300); // Th√™m √°nh s√°ng ƒëi·ªÉm m·∫°nh h∆°n
  pointLight.position.set(50, 50, 50);
  scene.add(pointLight);
}

function animate3D() {
  requestAnimationFrame(animate3D);

  // C·∫≠p nh·∫≠t v·ªã tr√≠ ch·ªØ
  texts.forEach((text, index) => {
    text.position.add(text.userData.velocity);

    // N·∫øu ch·ªØ ra kh·ªèi kh√¥ng gian, ƒë∆∞a n√≥ v·ªÅ v·ªã tr√≠ ng·∫´u nhi√™n
    if (text.position.length() > 50) {
      text.position.set(
        (Math.random() - 0.5) * 100,
        (Math.random() - 0.5) * 100,
        (Math.random() - 0.5) * 100
      );
    }
  });

  // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ch·ªØ trong kh√¥ng gian
  if (texts.length > 30) {
    const textToRemove = texts.shift();
    scene.remove(textToRemove);
  }

  controls.update();
  renderer.render(scene, camera);
}

// ƒê·∫£m b·∫£o canvas t·ª± ƒë·ªông thay ƒë·ªïi k√≠ch th∆∞·ªõc khi thay ƒë·ªïi m√†n h√¨nh
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});

// Kh·ªüi ch·∫°y
init3D();
